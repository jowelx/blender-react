/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./public/plane.glb
*/

import React, { useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei';
import { useEffect} from 'react';
import * as THREE from 'three';
export function Model(props) {
  const { nodes, materials,animations  } = useGLTF('/plane.glb')
    const group = useRef()
   const { actions } = useAnimations(animations, group)
    useEffect(() => {
    // Verifica que hay animaciones disponibles
   // if (animations.length > 0) {
      // Encuentra la animaci贸n que deseas reproducir
      const animation = animations.find((anim) => anim.name === 'CuboAction');

      // Crea un mixer para reproducir la animaci贸n
      const mixer = new THREE.AnimationMixer(group.current);

      // Agrega la animaci贸n al mixer
     // const action = mixer.clipAction(animation);
      console.log( mixer.clipAction(animation))
        console.log("animation")
          // Ajusta el tiempo efectivo de la animaci贸n para que se reproduzca a la mitad de velocidad
 //action.loop = THREE.LoopRepeat;
      // action.play();
      

      // Actualiza el mixer en cada fotograma
   //   const clock = new THREE.Clock();

//const animate = () => {
 /// const delta = clock.getDelta();
 // mixer.update(delta);
//  requestAnimationFrame(animate);
//};
//requestAnimationFrame(animate);
  //  }
  }, []);
  return (
    <group {...props} dispose={null}>
      <mesh geometry={nodes.Plano.geometry} material={materials['Explode Fade.001']} position={[0, 0.47, 0]} rotation={[Math.PI / 2, 0, Math.PI]} />
    </group>
  )
}

useGLTF.preload('/plane.glb')
